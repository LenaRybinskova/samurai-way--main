{"version":3,"file":"static/js/870.10a0bd1b.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfilInfo.module.css?25e7","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/AddNewPost/AddNewPost.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfilInfo_descriptionBlock__WTypn\",\"mainPhoto\":\"ProfilInfo_mainPhoto__9M0OB\",\"mainPhotoBlock\":\"ProfilInfo_mainPhotoBlock__MDDnG\",\"profileInfo\":\"ProfilInfo_profileInfo__pqoQv\",\"editProfileButton\":\"ProfilInfo_editProfileButton__fpFwJ\",\"contacts\":\"ProfilInfo_contacts__Dv++f\",\"customLabelFileInput\":\"ProfilInfo_customLabelFileInput__wRXSv\",\"fullNameForm\":\"ProfilInfo_fullNameForm__WbW9s\",\"fullNameFormDescription\":\"ProfilInfo_fullNameFormDescription__YWigI\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\nexport type ProfileStatusType = {\r\n    status: string\r\n    updateProfileStatusTC: (newStatus: string) => void\r\n}\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateProfileStatusTC(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <span><input onChange={onStatusChange} onBlur={deactivateEditMode} value={status} autoFocus></input>\r\n                </span>\r\n                : <div><span><b>Status: </b></span><span\r\n                    onDoubleClick={activateEditMode}>{props.status || 'no status'}</span>\r\n                </div>}\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n\r\n\r\n","import React from 'react';\r\nimport s from '../ProfilInfo.module.css'\r\nimport {ObtainedFormType} from '../../../..//components/Profile/ProfileInfo/ProfileInfo';\r\nimport {ContactsType, ProfileResaponseType} from '../../../../../src/redux/profileReducer';\r\nimport {createField, Input, Textarea} from '../../../common/FormsControls/FormsControls';\r\nimport {required} from '../../../../../src/utils/validators/validators';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\n\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileResaponseType | null\r\n    isOwner: boolean\r\n    onSubmit: (formData: ObtainedFormType) => void\r\n}\r\n\r\n//зачем дважды ProfileDataFormType\r\nexport const ProfileDataForm: React.FC<InjectedFormProps<ObtainedFormType, ProfilePropsType> & ProfilePropsType> = ({\r\n                                                                                                                        handleSubmit,\r\n                                                                                                                        error,\r\n                                                                                                                        profile,\r\n                                                                                                                    }) => {\r\n\r\n    return (\r\n\r\n        <div className={s.profileInfo}>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>{<button type={'submit'} className={s.editProfileButton}>сохранить</button>}</div>\r\n                {error && <div>{error}</div>}\r\n\r\n                <div className={s.fullNameForm}><b>Full name: </b><span className={s.fullNameFormDescription}>{createField('Full name', 'fullName', [required], Input)}</span></div>\r\n                <div className={s.fullNameForm}><b>Looking for a job:</b>\r\n                    <span>{createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}</span>\r\n                </div>\r\n                <div  className={s.fullNameForm}><b>Description:</b> {profile?.lookingForAJob &&\r\n                    <div>{createField('Looking for a job Description', 'lookingForAJobDescription', [required], Input)}</div>}</div>\r\n                {<div><b>About me:</b>\r\n                    {createField('About me', 'aboutMe', [required], Textarea)}\r\n                </div>}\r\n                <div><b>Contacts:</b>\r\n                    <div>{Object.keys(profile?.contacts as ContactsType).map((key: string) => {\r\n                        return (\r\n                            <div className={`${s.contacts} + ${s.fullNameForm}`}>\r\n                                <b>{key}</b>: <span>{createField(key, 'contacts.' + key, [], Input)}</span></div>)\r\n                    })}</div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const ReduxProfileDataForm = reduxForm<ObtainedFormType, ProfilePropsType>({\r\n// пишем уникальное название формы\r\n    form: 'edit-profile'\r\n})(ProfileDataForm)","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport s from './ProfilInfo.module.css'\r\nimport {ContactsType, ProfileResaponseType} from '../../../redux/profileReducer';\r\nimport Preloader from '../../common/preloader/Preloader';\r\nimport UserPhotoNull from '../../../assets/images/usersNull.png'\r\nimport ProfileStatusWithHooks from '../ProfileInfo/ProfileStatus/ProfileStatusWithHooks';\r\nimport {ReduxProfileDataForm} from '../../Profile/ProfileInfo/ProfileDataForm/ProfileDataForm';\r\n\r\n\r\nexport type ProfileInfoType = {\r\n    profile: ProfileResaponseType | null\r\n    updateProfileStatusTC: (newStatus: string) => void\r\n    profileStatus: string\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ObtainedFormType) => Promise<void>\r\n}\r\n\r\nexport type ObtainedFormType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription?: string\r\n    MyProfessionalSkills: string\r\n\r\n};\r\n\r\n\r\n// Указываем тип  ИМЕННО ключей contacts // ContactsKeys будет СТРОГО типом 'github' | 'vk' | 'facebook' | 'instagram' | 'twitter' | 'website' | 'youtube' | 'mainLink'\r\nexport  type ContactsKeys = keyof ContactsType;\r\n\r\nexport const ProfileInfo: FC<ProfileInfoType> = ({\r\n                                                     profile,\r\n                                                     profileStatus,\r\n                                                     updateProfileStatusTC,\r\n                                                     isOwner,\r\n                                                     savePhoto,\r\n                                                     saveProfile\r\n                                                 }) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: ObtainedFormType) => {\r\n        saveProfile(formData).then(() => setEditMode(false))\r\n    }\r\n\r\n    return (\r\n        <div className={s.descriptionBlock}>\r\n            <div className={s.mainPhotoBlock}>\r\n                <img src={profile?.photos.large || UserPhotoNull} className={s.mainPhoto}/>\r\n                {isOwner && (\r\n                    <label className={`${s.customLabelFileInput}`}>\r\n                        <input type={'file'} onChange={onMainPhotoSelected}/>\r\n                    </label>)\r\n                }\r\n            </div>\r\n            {editMode\r\n                ?\r\n                <ReduxProfileDataForm initialValues={profile} profile={profile} isOwner={isOwner} onSubmit={onSubmit}/>\r\n                : <ProfileData profile={profile} isOwner={isOwner} toEditMode={() => setEditMode(true)}/>}\r\n            <ProfileStatusWithHooks status={profileStatus} updateProfileStatusTC={updateProfileStatusTC}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type ProfileDataType = {\r\n    profile: ProfileResaponseType | null\r\n    isOwner: boolean\r\n    toEditMode: () => void\r\n}\r\n\r\n\r\nexport const ProfileData: FC<ProfileDataType> = ({profile, isOwner, toEditMode}) => {\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>{isOwner && <button className={s.editProfileButton} onClick={() => {\r\n                toEditMode()\r\n            } }>редактировать профиль</button>}</div>\r\n            <div><b>Full name: </b>\r\n                <span>{profile?.fullName}</span>\r\n            </div>\r\n            <div><b>Looking for a job: </b>\r\n                <span>{profile?.lookingForAJob ? 'Да' : 'Нет'}</span>\r\n            </div>\r\n            <div><b>Description: </b>{profile?.lookingForAJob &&\r\n                <span> {profile.lookingForAJobDescription}</span>\r\n            }</div>\r\n            <div><b>About me: </b>\r\n                <span>{profile?.aboutMe}</span>\r\n            </div>\r\n            <div><b>Contacts:</b>\r\n                <div>{Object.keys(profile?.contacts as ContactsType).map((key: string) => {\r\n                    return profile != null &&\r\n                        <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as ContactsKeys]}/>\r\n                })}</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport type ContactType = {\r\n    contactTitle: string\r\n    contactValue?: string\r\n}\r\n\r\nexport const Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={s.contacts}><b>{contactTitle}</b>:{contactValue}</div>\r\n    )\r\n}\r\n\r\n{/* <img src={profile?.photos.large != null ? profile?.photos.large : UserPhotoNull}/>*/\r\n}\r\n\r\n{/*                {userId === ownUserId && <input type={'file'} className={s.customFileInput} onChange={onMainPhotoSelected}/>}*/\r\n}\r\n\r\n\r\n/*\r\n(<button className={\"\"}>\r\n    <input type={'file'} id=\"inputFile\" hidden\r\n           className={`${s.customFileInput}`}\r\n           onChange={onMainPhotoSelected}/>\r\n    <label htmlFor={'inputFile'} className={'customFileUpload'}>изменить фото</label>\r\n</button>*/\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__Mu0eN\",\"postsBlockTitle\":\"MyPosts_postsBlockTitle__8-yvy\",\"newPostContainer\":\"MyPosts_newPostContainer__6gOUf\",\"newPostBlock\":\"MyPosts_newPostBlock__NHACX\",\"newPostTextarea\":\"MyPosts_newPostTextarea__VLX16\",\"addNewPostButtonContainer\":\"MyPosts_addNewPostButtonContainer__d2vKN\",\"addNewPostButton\":\"MyPosts_addNewPostButton__msg9W\",\"posts\":\"MyPosts_posts__gVldu\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Jp2LK\",\"active\":\"Post_active__0FzY6\",\"itemAvatar\":\"Post_itemAvatar__GtCuN\",\"itemText\":\"Post_itemText__x8WHy\",\"itemMessageWrapper\":\"Post_itemMessageWrapper__mPWcy\",\"itemMessage\":\"Post_itemMessage__zO3Lu\",\"itemTextMessage\":\"Post_itemTextMessage__UCAHm\",\"itemTextMessageTime\":\"Post_itemTextMessageTime__ItxuS\",\"itemLikes\":\"Post_itemLikes__xlsIJ\",\"likeImg\":\"Post_likeImg__O+sG2\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\nimport userNull from '../../../../assets/images/usersNull.png'\r\nimport like from '../../../../assets/icons/like.png'\r\n\r\ntype PostType = {\r\n    message?: string\r\n    likesCount: number\r\n    currentProfilePhoto: string\r\n    time?: string\r\n}\r\n\r\n\r\nexport const Post: React.FC<PostType> = (props) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img className={s.itemAvatar} src={props.currentProfilePhoto ? props.currentProfilePhoto : userNull}/>\r\n            <div className={s.itemText}>\r\n                <div className={s.itemMessageWrapper}>\r\n                    <div className={s.itemMessage}>\r\n                        <div className={s.itemTextMessage}>{props.message}</div>\r\n                        <div className={s.itemTextMessageTime}>{props.time}</div>\r\n                    </div>\r\n                </div>\r\n                <div className={s.itemLikes}>\r\n                    <img src={like} className={s.likeImg}/>\r\n                    {props.likesCount}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {maxLengthCreator} from '../../../utils/validators/validators'\r\nimport {Textarea} from '../../../../src/components/common/FormsControls/FormsControls'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport s from '../MyPosts/MyPosts.module.css'\r\n\r\nexport type InputFormType = {\r\n    newPostText: string\r\n}\r\nexport type AddNewPostProps = {\r\n    onSubmit: (newPostText: InputFormType) => void\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\n\r\nconst AddNewPost: React.FC<InjectedFormProps<InputFormType, AddNewPostProps> & AddNewPostProps> = (props) => {\r\n\r\n    const {handleSubmit, reset} = props;\r\n\r\n    const onSubmitHandle = (value: InputFormType) => {\r\n        props.onSubmit(value);// коллбек из родит компоненты\r\n        reset(); //зачистка поля\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.newPostContainer}>\r\n            <form onSubmit={handleSubmit(onSubmitHandle)}>\r\n                <div className={s.newPostBlock}>\r\n                    <div className={s.newPostTextarea}>\r\n                        <Field\r\n                            component={Textarea}\r\n                            name={'newPostText'}\r\n                            placeholder={'Введи текст нового поста'}\r\n                            validate={[maxLength100]}/>\r\n                    </div>\r\n                    <div className={s.addNewPostButtonContainer}>\r\n                        <button className={s.addNewPostButton} type={'submit'}>Add post</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    );\r\n};\r\nexport default reduxForm<InputFormType, AddNewPostProps>({\r\n    form: 'ProfileAddNewPostForm'\r\n})(AddNewPost)\r\n\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from './Post/Post';\r\nimport {MyPostsContainerPropsType} from './MyPostsContainer';\r\nimport AddNewPost, {InputFormType} from '../AddNewPost/AddNewPost';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootSTateType} from '../../../redux/reduxStore';\r\n\r\n\r\n// вариант мемоизации функц компоненты:\r\n//React.memo ХОК\r\nexport const MyPosts = React.memo((props: MyPostsContainerPropsType) => {\r\n    const currentProfilePhoto = useSelector<AppRootSTateType, any>(state => state.profilePage.profile?.photos.small)\r\n    let postsElements = props.posts.map(p => <Post\r\n        key={p.id}\r\n        message={p.message}\r\n        likesCount={p.likesCount}\r\n        currentProfilePhoto={currentProfilePhoto}\r\n        time={p.time}\r\n    />)\r\n\r\n    const addPost = (data: InputFormType) => {\r\n        props.addPost(data.newPostText)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3 className={s.postsBlockTitle}>My posts</h3>\r\n            {<AddNewPost onSubmit={addPost}/>}\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n/*\r\n// вариант мемоизации для классовой компоненты: либо экстендиться от PureComponent или самост указать метод shouldComponentUpdate\r\n/!*!//PureComponent делает за нас эту проверку в shouldComponentUpdate\r\n// цепочка наследования такая: Component -PureComponent - MyPosts\r\nexport class MyPosts extends React.PureComponent<MyPostsContainerPropsType> {\r\n\r\n    /!*    shouldComponentUpdate(nextProps: Readonly<MyPostsContainerPropsType>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n            // пропсы новые пришли и стейт изменился - ТРУ -Ререндер компоненты\r\n            return nextProps != this.props  ||  nextState != this.state // если пропсы нов не равны старым ТРУ, то будет ререндер\r\n        }*!/\r\n\r\n    render() {\r\n\r\n        let postsElements = this.props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>)\r\n\r\n        const addPost = (data: InputFormType) => {\r\n            console.log('text ', data)\r\n            this.props.addPost(data.newPostText)\r\n        }\r\n\r\n        return (\r\n            <div className={s.postsBlock}><h3>My posts</h3>\r\n                <div>\r\n                    <AddNewPost onSubmit={addPost}/>\r\n                </div>\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}*!/\r\n*/\r\n\r\n\r\n/*   //1 вариант\r\n    const addPost = () => {\r\n            alert(newPostElement.current?.value) // если вдруг такой ссылки на ТексЭрия не будет и Реакт вернет null undefined и не будет брать value\r\n    }\r\n\r\n    //2 вариант\r\n    const addPost2 = () => {\r\n        if(newPostElement.current)\r\n        alert(newPostElement.current.value)\r\n    }\r\n\r\n    //3 вариант\r\n    const addPost3 = () => {\r\n            alert(newPostElement.current && newPostElement.current.value)\r\n    }*/\r\n\r\n\r\n/*    const newPostElement = React.createRef<HTMLTextAreaElement>()*/ // теперь через евент проще сделать, чем вещать хук реф","import React from 'react';\r\nimport {addPostAC, PostType} from '../../../redux/profileReducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {AppRootSTateType} from '../../../redux/reduxStore';\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostType[],\r\n    newPostText: string\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n// функция которая всего принимает СТЕЙТ всего приложения.\r\n// Запускается каждый раз когда меняется Стейт и формирует новый объект,\r\n// который сравнивается с старым объектом( сравниваются внутренности объектов)\r\n// поэт чтобы был ререндер компоненты надо чтобы редьюсор возвращал копию\r\n\r\nconst mapStateToProps = (state: AppRootSTateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n// используем connect\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileContainer\":\"Profile_profileContainer__9N8X7\"};","import React from 'react'\r\nimport {ObtainedFormType, ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileResaponseType} from '../../redux/profileReducer';\r\nimport s from '../Profile/Profile.module.css'\r\n\r\n\r\nexport type ProfileType = {\r\n    //setUserProfile и toggleIsFetching считаются \"транзитными\" их не надо типизировать, тк непосредственно в Profile они не используются\r\n    profile: ProfileResaponseType | null\r\n    updateProfileStatusTC: (newStatus: string) => void\r\n    profileStatus: string\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ObtainedFormType) => Promise<void>\r\n\r\n}\r\nexport const Profile = (props: ProfileType) => {\r\n\r\n    return (\r\n        <div className={s.profileContainer}>\r\n            <ProfileInfo profile={props.profile} profileStatus={props.profileStatus}\r\n                         updateProfileStatusTC={props.updateProfileStatusTC} isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto} saveProfile={props.saveProfile}/>\r\n            {props.isOwner && <MyPostsContainer/>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootSTateType} from '../../redux/reduxStore';\r\nimport {\r\n    getUserProfileTC,\r\n    getUserStatusTC,\r\n    ProfileResaponseType, savePhoto,\r\n    saveProfile,\r\n    updateProfileStatusTC\r\n} from '../../redux/profileReducer';\r\nimport {toggleIsFetching} from '../../redux/usersReducer';\r\nimport {Profile} from './Profile';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {ObtainedFormType} from \"./ProfileInfo/ProfileInfo\";\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component<OwnPropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId //string\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId + ''\r\n            if (!userId) {\r\n                this.props.history.push('/login')// через history.push делаем редирект, если нет куки и в стейте не присвоен userId\r\n            }\r\n        }\r\n        this.props.getUserProfileTC(Number(userId))\r\n        this.props.getUserStatusTC(Number(userId))\r\n    }\r\n\r\n    // чтобы при перех на др юзера он отобр, а перех на Профайл отобр всегда мой\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<OwnPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        //если ИД в УРЛЕ изменился, то рефреш профайла\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props} profile={this.props.profile}\r\n                        updateProfileStatusTC={this.props.updateProfileStatusTC}\r\n                        profileStatus={this.props.profileStatus}\r\n                        isOwner={!this.props.match.params.userId}\r\n                        savePhoto={this.props.savePhoto} saveProfile={this.props.saveProfile}/>\r\n    }\r\n}\r\n\r\ntype MapDispatchToProsType = {\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    getUserProfileTC: (userId: number) => void //убрала |null\r\n    getUserStatusTC: (userId: number) => void\r\n    updateProfileStatusTC: (newStatus: string) => void\r\n    savePhoto: (photo: any) => void\r\n    saveProfile: (formData: ObtainedFormType) => Promise<void>\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: ProfileResaponseType | null,\r\n    profileStatus: string\r\n    authorizedUserId: string | null\r\n    isAuth: boolean\r\n}\r\ntype ProfileContainerType = MapDispatchToProsType & MapStateToPropsType\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n// вытащили типы из RouteComponentProps и свои типы для контейнерной компоненты добавили\r\ntype OwnPropsType = RouteComponentProps<PathParamsType> & ProfileContainerType\r\n\r\nconst mapStateToProps = (state: AppRootSTateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        profileStatus: state.profilePage.profileStatus,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        toggleIsFetching,\r\n        getUserProfileTC,\r\n        getUserStatusTC,\r\n        updateProfileStatusTC,\r\n        savePhoto,\r\n        saveProfile\r\n    }),\r\n    withRouter,\r\n    WithAuthRedirect)\r\n(ProfileContainer)\r\n","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootSTateType} from '../redux/reduxStore';\r\n\r\ntype MstpType = {\r\n    isAuth: boolean\r\n}\r\nlet mstp = (state: AppRootSTateType): MstpType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const WithAuthRedirect = <T, >(Component: React.ComponentType<T>) => {\r\n\r\n    const RedirectComponent = (props: MstpType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    //обернули коннектом, чтобы получть из Стора isAuth\r\n    let ConnectRedirectComponent = connect(mstp)(RedirectComponent)\r\n\r\n    return ConnectRedirectComponent\r\n};\r\n\r\n\r\n/*\r\n// варриант на классовой компоненету\r\nlet mstp = (state: AppRootSTateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n//1 конт компонента - класс, редиректит\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to = {'/login'}\r\n            />\r\n            return <Component {...props}\r\n            />\r\n        }\r\n    }\r\n\r\n//2 конт компонента - коннект, снабжает класс пропсами isAuth\r\n    let ConnectRedirectComponent = connect(mstp)(RedirectComponent)\r\n    return ConnectRedirectComponent\r\n};*/\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","onBlur","updateProfileStatusTC","autoFocus","onDoubleClick","ReduxProfileDataForm","reduxForm","form","handleSubmit","error","profile","className","s","onSubmit","type","createField","required","Input","lookingForAJob","Textarea","Object","keys","contacts","map","key","ProfileInfo","profileStatus","isOwner","savePhoto","saveProfile","Preloader","src","photos","large","UserPhotoNull","target","files","initialValues","formData","then","ProfileData","toEditMode","onClick","fullName","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","Post","currentProfilePhoto","userNull","message","time","like","likesCount","maxLength100","maxLengthCreator","reset","Field","component","name","placeholder","validate","MyPosts","React","useSelector","state","profilePage","small","postsElements","posts","p","id","data","addPost","newPostText","MyPostsContainer","connect","dispatch","addPostAC","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfileTC","Number","getUserStatusTC","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","toggleIsFetching","withRouter","WithAuthRedirect","mstp","Component","restProps","to"],"sourceRoot":""}