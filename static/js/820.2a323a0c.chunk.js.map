{"version":3,"file":"static/js/820.2a323a0c.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/EmptyWindow.tsx","components/Dialogs/Chat.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__KdKFN\",\"dialogsItems\":\"Dialogs_dialogsItems__mgEE2\",\"chatContainer\":\"Dialogs_chatContainer__HNpEU\",\"dialog\":\"Dialogs_dialog__FwpB0\",\"messages\":\"Dialogs_messages__wGkQb\",\"messageContainer\":\"Dialogs_messageContainer__Ct7lk\",\"message\":\"Dialogs_message__LSFbi\",\"chatMessageTimestamp\":\"Dialogs_chatMessageTimestamp__EXoTY\",\"chat\":\"Dialogs_chat__hVThc\",\"me\":\"Dialogs_me__q+C1d\",\"friend\":\"Dialogs_friend__kiY1C\",\"addNewMessageContainer\":\"Dialogs_addNewMessageContainer__9NlTe\",\"selectUserLink\":\"Dialogs_selectUserLink__OhDzV\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport type DialogsType = {\r\n    name: string\r\n    id: number\r\n    avatar: string\r\n}\r\n\r\n\r\nexport const DialogItem: React.FC<DialogsType> = (props) => {\r\n    const path = '/dialogs/' + props.id\r\n    return (\r\n        <NavLink to={path} className={s.dialog}>\r\n            <img src={props.avatar}/>\r\n            <div><b>{props.name}</b></div>\r\n        </NavLink>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import {InjectedFormProps} from 'redux-form/lib/reduxForm';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport React from 'react';\r\nimport {maxLengthCreator} from '../../../../src/utils/validators/validators';\r\nimport {Textarea} from '../../../../src/components/common/FormsControls/FormsControls';\r\nimport s from '../Dialogs.module.css'\r\n\r\nexport type newMessageType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport type AddMessageFormProps = {\r\n    onSubmit: (newMessage: newMessageType) => void\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<newMessageType, AddMessageFormProps> & AddMessageFormProps> = (props) => {\r\n    const {handleSubmit, reset} = props\r\n\r\n    const addNewMessageSubmit = (formValue: any) => {\r\n        props.onSubmit(formValue)\r\n        reset()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit(addNewMessageSubmit)}>\r\n                <div className={s.addNewMessageContainer}>\r\n                    <div>\r\n                        <Field\r\n                            component={Textarea}\r\n                            name={'newMessageBody'}\r\n                            placeholder={'Enter your message'}\r\n                            validate={[maxLength100]}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <button type={'submit'}>send</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default reduxForm<newMessageType, AddMessageFormProps>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\n\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {MessageType} from '../../../redux/dialogsReducer';\r\n\r\n\r\nexport const Message: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className={`${s.messageContainer} ${props.sender === 'me' ? s.me : s.friend}`}>\r\n            <div className={s.message}>{props.message}</div>\r\n            <div className={s.chatMessageTimestamp}>{props.time}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//props.sender === 'me' ? s.me : s.friend\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from '../Dialogs/Dialogs.module.css'\r\n\r\nconst EmptyWindow = () => {\r\n    return (\r\n        <div>\r\n            Выберите чат\r\n            или <NavLink to={'/users'} className={s.selectUserLink}>выберите пользователя</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmptyWindow;","import React from 'react';\r\nimport AddMessageForm, {newMessageType} from '../Dialogs/AddMessageForm/AddMessageForm';\r\nimport {useParams} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootSTateType} from '../../redux/reduxStore';\r\nimport {MessageType, sendMessageAC} from '../../redux/dialogsReducer';\r\nimport s from './Dialogs.module.css'\r\nimport {Message} from '../Dialogs/Message/Message';\r\nimport EmptyWindow from '../Dialogs/EmptyWindow';\r\n\r\nconst Chat = (props: any) => {\r\n\r\n    const {userId} = useParams<{ userId: string }>();\r\n    const messagesElements = useSelector<AppRootSTateType, MessageType[]>(state => state.dialogsPage.messages[userId])\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const addNewMessage = (data: newMessageType) => {\r\n        dispatch(sendMessageAC(userId, data.newMessageBody))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.chat}>{\r\n                messagesElements\r\n                    ? messagesElements.map((m: MessageType) => <Message key={m.id} {...m}/>)\r\n                    : <EmptyWindow/>}\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n\r\n/*\r\n\r\ncons\r\n    const messages = useSelector<AppRootSTateType, MessageType[]>((state) => state.dialogsPage.messages[(userId)]);\r\n\r\n    const messagesElements = messages.map((message) => (\r\n        <div key={message.id}>{message.message}</div>\r\n    ));\r\n\r\n// const messages = useSelector<AppRootSTateType, MessageType[]>((state) => state.dialogsPage.messages[userId]);\r\n\r\n\r\n    let messagesElements = props.dialogsPage.messages.map(m => <Message key={m.id} message={m.message}/>)*/\r\n","import React from 'react';\r\nimport {InitialStateType, sendMessageAC} from '../../redux/dialogsReducer';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootSTateType} from '../../redux/reduxStore';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport {Dialogs} from '../Dialogs/Dialogs'\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialStateType\r\n    /*    isAuth:boolean*/\r\n}\r\ntype MapDispatchToPropsType = {\r\n\r\n    sendMessage: (userId: string, newMessageBody: string) => void\r\n}\r\nexport type DialogsContainerType = MapStateToPropsType & MapDispatchToPropsType\r\n// СВОЙСТВА\r\nlet mapStateToProps = (state: AppRootSTateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n// КОЛЛЛБЕКИ\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (userId: string, newMessageBody: string) => {\r\n            dispatch(sendMessageAC(userId, newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*//HOC\r\nconst DialogsRedirectComponent=WithAuthRedirect<DialogsContainerType>(Dialogs)\r\n\r\n\r\n//этими функциями(через функцию коннект) дали числой компон Dialogs все что нужно. По сути создали контейнерную компоненту\r\n const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(DialogsRedirectComponent)*/\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from './DialogItem/DialogsItem';\r\nimport {DialogsContainerType} from './DialogsContainer';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootSTateType} from '../../redux/reduxStore';\r\nimport {UserType} from '../../redux/usersReducer';\r\nimport usersNull from '../../assets/images/usersNull.png'\r\nimport Chat from './Chat';\r\n\r\n\r\n/*const Dialogs: React.FC<DialogsType> = (props) => {*/\r\nexport const Dialogs = (props: DialogsContainerType) => {\r\n\r\n        const friends = useSelector<AppRootSTateType, UserType[]>(state => state.subscribers.friends)\r\n\r\n        const dialogsElements = friends.map(d => <DialogItem key={d.id} name={d.name} id={d.id}\r\n                                                             avatar={d.photos.small ? d.photos.small : usersNull}/>)\r\n\r\n\r\n        return (\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.chatContainer}><Chat sendMessage={props.sendMessage}/></div>\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\n\r\n/*\r\nconst AddMessageForm = (props: InjectedFormProps) => { // InjectedFormProps  я протипизировала\r\n\r\n    const maxLength100 = maxLengthCreator(100)\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newMessageBody'} placeholder={'Enter your message'} validate={[requiredField,maxLength100]}/>\r\n            </div>\r\n            <div>\r\n                <button type={'submit'}>send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;*/\r\n","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootSTateType} from '../redux/reduxStore';\r\n\r\ntype MstpType = {\r\n    isAuth: boolean\r\n}\r\nlet mstp = (state: AppRootSTateType): MstpType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const WithAuthRedirect = <T, >(Component: React.ComponentType<T>) => {\r\n\r\n    const RedirectComponent = (props: MstpType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    //обернули коннектом, чтобы получть из Стора isAuth\r\n    let ConnectRedirectComponent = connect(mstp)(RedirectComponent)\r\n\r\n    return ConnectRedirectComponent\r\n};\r\n\r\n\r\n/*\r\n// варриант на классовой компоненету\r\nlet mstp = (state: AppRootSTateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n//1 конт компонента - класс, редиректит\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to = {'/login'}\r\n            />\r\n            return <Component {...props}\r\n            />\r\n        }\r\n    }\r\n\r\n//2 конт компонента - коннект, снабжает класс пропсами isAuth\r\n    let ConnectRedirectComponent = connect(mstp)(RedirectComponent)\r\n    return ConnectRedirectComponent\r\n};*/\r\n"],"names":["DialogItem","props","path","id","to","className","s","src","avatar","name","maxLength100","maxLengthCreator","reduxForm","form","handleSubmit","reset","onSubmit","formValue","Field","component","Textarea","placeholder","validate","type","Message","sender","message","time","userId","useParams","messagesElements","useSelector","state","dialogsPage","messages","dispatch","useDispatch","map","m","data","sendMessageAC","newMessageBody","compose","connect","sendMessage","WithAuthRedirect","dialogsElements","subscribers","friends","d","photos","small","usersNull","mstp","isAuth","auth","Component","restProps"],"sourceRoot":""}